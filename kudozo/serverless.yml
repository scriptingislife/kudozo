# Serverless backend configuration

service: sitefeedback

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  stage: ${opt:stage, self:custom.default_stage}
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:custom.default_stage}
    FEEDBACK_URL: { "Fn::Join" : ["", ["https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/feedback" ] ]  }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

custom:
  default_stage: dev
  pythonRequirements:
    dockerizePip: non-linux

useDotenv: true

functions:
  feedback:
    handler: feedback/feedback.main
    events:
      - http:
          path: feedback
          method: post
          cors: true
    environment:
      WEBHOOK_URL: ${env:WEBHOOK_URL}
  html:
    handler: html/html.main
    events:
      - http:
          path: button.html
          method: get
  admin:
    handler: admin/admin.main
    events:
      - http:
          path: admin
          method: get

resources:
  Resources:
    FeedbackDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
plugins:
  - serverless-python-requirements
